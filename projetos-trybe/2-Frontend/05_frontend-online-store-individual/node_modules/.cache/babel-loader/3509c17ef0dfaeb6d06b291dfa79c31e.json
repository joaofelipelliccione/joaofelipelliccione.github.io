{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/pages/Home.jsx\";\nimport React from 'react';\nimport { getProductsFromCategoryAndQuery } from '../services/api';\nimport Card from '../components/Card';\nimport Categories from '../components/Categories';\nimport Header from '../components/Header';\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n\n    this.settingLocalStorage = () => {\n      // Função que define o local storage do usuário, em seu primeiro acesso ao website. É chamada no Constructor(), logo, é como se estivesse sendo chamada no antigo componentWillMount().\n      const userCart = JSON.parse(localStorage.getItem(\"userCart\"));\n      const searchResultsFromLocSt = JSON.parse(localStorage.getItem('searchResults'));\n\n      if (userCart === null || userCart.length === 0) {\n        localStorage.setItem('userCart', JSON.stringify([]));\n        localStorage.setItem('totalItemsOnCart', JSON.stringify(0));\n        localStorage.setItem('purchaseTotalValue', JSON.stringify(0));\n      }\n\n      if (searchResultsFromLocSt === null || searchResultsFromLocSt.length === 0) {\n        this.setState({\n          results: []\n        });\n      } else {\n        this.setState({\n          results: []\n        });\n      }\n    };\n\n    this.getLocStUserCart = () => {\n      // Função que capta os itens do carrinho salvos no local storage, sempre que a página Home for montada. Tal função evita que o carrinho do usuário seja restaurado sempre que ele vá para a página Cart ou para a ProductDetails.\n      const cartItemsFromLocSt = JSON.parse(localStorage.getItem('userCart'));\n\n      if (Array.isArray(cartItemsFromLocSt)) {\n        // Caso a key \"userCart\", de local storage, NÃO seja um array vazio...\n        this.setState({\n          cartItems: cartItemsFromLocSt\n        }); // ...o estado é definido.\n      }\n    };\n\n    this.handleClick = async () => {\n      // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada no termo pesquisado. Será chamada no onClick do botão de pesquisar.\n      this.setState({\n        loading: true\n      });\n      const {\n        categoryId,\n        userSearchedItem\n      } = this.state;\n      const response = await getProductsFromCategoryAndQuery(categoryId, userSearchedItem);\n      this.setState({\n        didSearch: true,\n        results: response.results,\n        loading: false\n      }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results)));\n    };\n\n    this.onInputChange = ({\n      target\n    }) => {\n      // Função que altera o estado 'userSearchedItem', no momento que o usuário realiza uma busca. Será chamada no onChange de #searchBar.\n      const {\n        name\n      } = target;\n      const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n      this.setState({\n        [name]: formElementValue\n      });\n    };\n\n    this.categoryChecked = async ({\n      target\n    }) => {\n      // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada na categoria clicada. Será chamada no onChange de cada radio, de cada categoria.\n      const {\n        userSearchedItem\n      } = this.state;\n      this.setState({\n        loading: true,\n        categoryId: target.id\n      });\n      const response = await getProductsFromCategoryAndQuery(target.id, userSearchedItem);\n      this.setState({\n        results: response.results,\n        didSearch: true,\n        loading: false\n      }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results)));\n    };\n\n    this.setLocStOnAddToCart = updatedCartItems => {\n      // Função que aloca, no local storage, importantes informações, sempre que um novo item for adicionado ao carrinho. É chamada dentro da addToCart() abaixo, após a atualização do estado cuja key é \"cartItems\".\n      // Atualização do carrinho, que passa a ter um novo item:\n      localStorage.setItem('userCart', JSON.stringify(updatedCartItems)); // Atualização da quantidade de itens no carrinho:\n\n      const quantitiesArray = updatedCartItems.map(microObj => microObj.quantity);\n      const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n      localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant)); // Atualização do atual valor total (R$) do carrinho:\n\n      const totalValuesArray = updatedCartItems.map(microObj => microObj.totalValue);\n      const totalValue = totalValuesArray.reduce((result, value) => result + value);\n      localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n    };\n\n    this.addToCart = ({\n      target\n    }) => {\n      // Função que permite a adição de um determinado produto ao carrinho de compras. Será passada para o componente Card, via props, e chamada no OnClick do botão \"Adicionar ao Carrinho\". || OBS: O Id do botão \"Adicionar ao Carrinho\", de cada Card, é igual ao índice do produto no array results.\n      const {\n        id\n      } = target;\n      const {\n        results,\n        cartItems\n      } = this.state;\n      const objProduct = {\n        productId: results[id].id,\n        title: results[id].title,\n        thumbnail: results[id].thumbnail,\n        price: results[id].price,\n        availableQuantity: results[id].available_quantity,\n        // Quantidade disponível daquele produto.\n        address: results[id].address,\n        quantity: 1,\n        // Quantidade adquirida pelo usuário\n        totalValue: results[id].price\n      };\n\n      if (!cartItems.some(item => item.title === objProduct.title)) {\n        // Condicional que evita a adição de 2 produtos iguais ao carrinho.\n        this.setState(prevState => ({\n          cartItems: [...prevState.cartItems, objProduct]\n        }), () => this.setLocStOnAddToCart(this.state.cartItems)); // Após atualização do estado de key igual à cartItems, atualiza-se o local storage.\n      }\n    };\n\n    this.settingLocalStorage();\n    this.state = {\n      loading: false,\n      userSearchedItem: '',\n      categoryId: '',\n      results: [],\n      didSearch: false,\n      cartItems: []\n    };\n  }\n\n  componentDidMount() {\n    this.getLocStUserCart();\n  }\n\n  render() {\n    const {\n      loading,\n      userSearchedItem,\n      results,\n      didSearch,\n      cartItems\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"homepage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      loading: loading,\n      cartItems: cartItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      id: \"homepageCenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"searchContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"searchBar\",\n      \"data-testid\": \"query-input\",\n      name: \"userSearchedItem\",\n      value: userSearchedItem,\n      onChange: this.onInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleClick,\n      \"data-testid\": \"query-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"emoji-lupa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, \"\\uD83D\\uDD0E\"))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"productsDisplay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, !didSearch ? /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"home-initial-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, \"Busque um produto ou escolha uma categoria!\") : results.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cardContainer1\",\n      key: item.id,\n      \"data-testid\": \"product\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      productId: item.id,\n      title: item.title,\n      thumbnail: item.thumbnail,\n      price: item.price,\n      availableQuantity: item.available_quantity,\n      address: item.address,\n      productIndex: index,\n      addToCart: this.addToCart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    })))), /*#__PURE__*/React.createElement(\"aside\", {\n      id: \"categoriesContainer1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Categories, {\n      categoryChecked: this.categoryChecked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/pages/Home.jsx"],"names":["React","getProductsFromCategoryAndQuery","Card","Categories","Header","Home","Component","constructor","settingLocalStorage","userCart","JSON","parse","localStorage","getItem","searchResultsFromLocSt","length","setItem","stringify","setState","results","getLocStUserCart","cartItemsFromLocSt","Array","isArray","cartItems","handleClick","loading","categoryId","userSearchedItem","state","response","didSearch","onInputChange","target","name","formElementValue","type","checked","value","categoryChecked","id","setLocStOnAddToCart","updatedCartItems","quantitiesArray","map","microObj","quantity","totalQuant","reduce","result","totalValuesArray","totalValue","addToCart","objProduct","productId","title","thumbnail","price","availableQuantity","available_quantity","address","some","item","prevState","componentDidMount","render","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getProductsFromCategoryAndQuery } from '../services/api';\nimport Card from '../components/Card';\nimport Categories from '../components/Categories';\nimport Header from '../components/Header';\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.settingLocalStorage();\n\n    this.state = {\n      loading: false,\n      userSearchedItem: '',\n      categoryId: '',\n      results: [],\n      didSearch: false,\n      cartItems: [],\n    };\n  }\n\n  settingLocalStorage = () => { // Função que define o local storage do usuário, em seu primeiro acesso ao website. É chamada no Constructor(), logo, é como se estivesse sendo chamada no antigo componentWillMount().\n    const userCart = JSON.parse(localStorage.getItem(\"userCart\"));\n    const searchResultsFromLocSt = JSON.parse(localStorage.getItem('searchResults'));\n\n    if (userCart === null || userCart.length === 0) {\n      localStorage.setItem('userCart', JSON.stringify([]));\n      localStorage.setItem('totalItemsOnCart', JSON.stringify(0));\n      localStorage.setItem('purchaseTotalValue', JSON.stringify(0));\n    }\n\n    if (searchResultsFromLocSt === null || searchResultsFromLocSt.length === 0) {\n      this.setState({ results: [] });\n    } else {\n      this.setState({ results: [] });\n    }\n  }\n\n  componentDidMount() {\n    this.getLocStUserCart();\n  }\n\n  getLocStUserCart = () => { // Função que capta os itens do carrinho salvos no local storage, sempre que a página Home for montada. Tal função evita que o carrinho do usuário seja restaurado sempre que ele vá para a página Cart ou para a ProductDetails.\n    const cartItemsFromLocSt = JSON.parse(localStorage.getItem('userCart'));\n\n    if (Array.isArray(cartItemsFromLocSt)) { // Caso a key \"userCart\", de local storage, NÃO seja um array vazio...\n      this.setState({ cartItems: cartItemsFromLocSt }); // ...o estado é definido.\n    }\n  }\n\n  handleClick = async () => { // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada no termo pesquisado. Será chamada no onClick do botão de pesquisar.\n    this.setState({ loading: true });\n    const { categoryId, userSearchedItem } = this.state;\n\n    const response = await getProductsFromCategoryAndQuery(categoryId, userSearchedItem);\n\n    this.setState({\n      didSearch: true,\n      results: response.results,\n      loading: false,\n    }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results)));\n  }\n\n  onInputChange = ({ target }) => { // Função que altera o estado 'userSearchedItem', no momento que o usuário realiza uma busca. Será chamada no onChange de #searchBar.\n    const { name } = target;\n    const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({ [name]: formElementValue });\n  }\n\n  categoryChecked = async ({ target }) => { // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada na categoria clicada. Será chamada no onChange de cada radio, de cada categoria.\n    const { userSearchedItem } = this.state;\n    this.setState({ loading: true, categoryId: target.id });\n\n    const response = await getProductsFromCategoryAndQuery(target.id, userSearchedItem);\n    this.setState(\n      { results: response.results,\n        didSearch: true,\n        loading: false,\n      }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results)));\n  }\n\n  setLocStOnAddToCart = (updatedCartItems) => { // Função que aloca, no local storage, importantes informações, sempre que um novo item for adicionado ao carrinho. É chamada dentro da addToCart() abaixo, após a atualização do estado cuja key é \"cartItems\".\n\n    // Atualização do carrinho, que passa a ter um novo item:\n    localStorage.setItem('userCart', JSON.stringify(updatedCartItems));\n\n    // Atualização da quantidade de itens no carrinho:\n    const quantitiesArray = updatedCartItems.map((microObj) => microObj.quantity);\n    const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant));\n\n    // Atualização do atual valor total (R$) do carrinho:\n    const totalValuesArray = updatedCartItems.map((microObj) => microObj.totalValue);\n    const totalValue = totalValuesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n\n  }\n\n  addToCart = ({ target }) => { // Função que permite a adição de um determinado produto ao carrinho de compras. Será passada para o componente Card, via props, e chamada no OnClick do botão \"Adicionar ao Carrinho\". || OBS: O Id do botão \"Adicionar ao Carrinho\", de cada Card, é igual ao índice do produto no array results.\n    const { id } = target;\n    const { results, cartItems } = this.state;\n    const objProduct = {\n      productId: results[id].id,\n      title: results[id].title,\n      thumbnail: results[id].thumbnail,\n      price: results[id].price,\n      availableQuantity: results[id].available_quantity, // Quantidade disponível daquele produto.\n      address: results[id].address,\n      quantity: 1, // Quantidade adquirida pelo usuário\n      totalValue: results[id].price,\n    };\n\n    if (!cartItems.some((item) => item.title === objProduct.title)) { // Condicional que evita a adição de 2 produtos iguais ao carrinho.\n      this.setState((prevState) => ({\n        cartItems: [...prevState.cartItems, objProduct],\n      }), () => this.setLocStOnAddToCart(this.state.cartItems)); // Após atualização do estado de key igual à cartItems, atualiza-se o local storage.\n    }\n  }\n\n  render() {\n    const { loading, userSearchedItem, results, didSearch, cartItems } = this.state;\n\n    return (\n      <div id=\"homepage\">\n        <Header loading={ loading } cartItems={ cartItems } />\n\n        <section id=\"homepageCenter\">\n          <div id=\"searchContainer\">\n            <label htmlFor=\"search\">\n              <input\n                id=\"searchBar\"\n                data-testid=\"query-input\"\n                name=\"userSearchedItem\"\n                value={ userSearchedItem }\n                onChange={ this.onInputChange }\n              />\n            </label>\n            <button\n              type=\"button\"\n              onClick={ this.handleClick }\n              data-testid=\"query-button\"\n            >\n              <span role=\"img\" aria-label=\"emoji-lupa\">🔎</span>\n            </button>\n          </div>\n          <div id=\"productsDisplay\">\n            { !didSearch\n              ? (\n                <p data-testid=\"home-initial-message\">\n                  Busque um produto ou escolha uma categoria!\n                </p>)\n              : results.map((item, index) => (\n                <div className=\"cardContainer1\" key={ item.id } data-testid=\"product\">\n                  <Card\n                    productId={ item.id }\n                    title={ item.title }\n                    thumbnail={ item.thumbnail }\n                    price={ item.price }\n                    availableQuantity={ item.available_quantity }\n                    address={ item.address }\n                    productIndex={ index }\n                    addToCart={ this.addToCart }\n                  />\n                </div>\n              ))}\n          </div>\n          <aside id=\"categoriesContainer1\">\n            <Categories categoryChecked={ this.categoryChecked } />\n          </aside>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}