{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/\\xC1rea de Trabalho/frontend-online-store-individual/src/pages/Cart.jsx\";\nimport React from 'react';\nimport CartCard from '../components/CartCard';\nimport Header from '../components/Header';\n\nclass Cart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.insertItensInTheCart = () => {\n      // Função que capta os itens do carrinho salvos no local storage, sempre que a página Cart for montada.\n      const cartItems = JSON.parse(localStorage.getItem('userCart'));\n\n      if (Array.isArray(cartItems)) {\n        // Caso a key \"userCart\", de local storage, NÃO seja um array vazio...\n        this.setState({\n          cartItems\n        });\n      }\n    };\n\n    this.updateLocStUserCart = () => {\n      // Função que atualiza a key \"userCart\", de local storage, sempre que algum estado da página Cart for atualizado [componentDidUpdate()].\n      const {\n        cartItems\n      } = this.state;\n      localStorage.setItem('userCart', JSON.stringify(cartItems));\n    };\n\n    this.deleteCartItem = ({\n      target\n    }) => {\n      // Função que deleta produtos do carrinho.\n      const {\n        cartItems\n      } = this.state;\n      const productIndex = cartItems.findIndex(product => product.productId === target.id); // REF: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n      // OBS: Todos os botões de deletar, possuem Id igual à ID do produto. Isso possibilita o funcionamento do target acima.\n\n      this.setState({\n        cartItems: cartItems.filter((_product, index) => index !== productIndex) // Retorna todos os produtos contidos no estado 'cartItems', menos o produto excluído.\n\n      });\n\n      if (JSON.parse(localStorage.getItem('userCart')).length === 0) {}\n    };\n\n    this.purchaseTVIncrease = price => {\n      // Função que AUMENTA o valor do estado purchaseTotalValue, sempre que um novo componente CartCard for montado (isso é, adicionado ao carrinho) e/ou quando o botão de '+' de um componente CartCard for pressionado. É passada ao componente CartCard, via props.\n      this.setState(prevState => ({\n        purchaseTotalValue: prevState.purchaseTotalValue + price\n      }));\n    };\n\n    this.purchaseTVDecrease = price => {\n      // Função que REDUZ o valor do estado purchaseTotalValue, sempre que um novo componente CartCard for desmontado (isso é, retirado do carrinho) e/ou quando o botão de '-' de um componente CartCard for pressionado. É passada ao componente CartCard, via props.\n      this.setState(prevState => ({\n        purchaseTotalValue: prevState.purchaseTotalValue - price\n      }));\n    };\n\n    this.state = {\n      cartItems: [],\n      purchaseTotalValue: 0\n    };\n  }\n\n  componentDidMount() {\n    this.insertItensInTheCart();\n  }\n\n  componentDidUpdate() {\n    this.updateLocStUserCart();\n  }\n\n  render() {\n    const {\n      cartItems,\n      purchaseTotalValue\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"cartPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      cartItems: cartItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"main\", {\n      id: \"cartProductsDisplay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, cartItems.length === 0 ? /*#__PURE__*/React.createElement(\"h3\", {\n      \"data-testid\": \"shopping-cart-empty-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, \"Seu carrinho est\\xE1 vazio\") : cartItems.map(cartItem => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"eachCartCardContainer\",\n      key: cartItem.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CartCard, {\n      title: cartItem.title,\n      thumbnail: cartItem.thumbnail,\n      productPrice: cartItem.price,\n      productId: cartItem.productId,\n      deleteCartItem: this.deleteCartItem,\n      purchaseTVIncrease: this.purchaseTVIncrease,\n      purchaseTVDecrease: this.purchaseTVDecrease,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, purchaseTotalValue.toFixed(2))));\n  }\n\n}\n\nexport default Cart;","map":{"version":3,"sources":["/home/joaofelipe/Área de Trabalho/frontend-online-store-individual/src/pages/Cart.jsx"],"names":["React","CartCard","Header","Cart","Component","constructor","props","insertItensInTheCart","cartItems","JSON","parse","localStorage","getItem","Array","isArray","setState","updateLocStUserCart","state","setItem","stringify","deleteCartItem","target","productIndex","findIndex","product","productId","id","filter","_product","index","length","purchaseTVIncrease","price","prevState","purchaseTotalValue","purchaseTVDecrease","componentDidMount","componentDidUpdate","render","map","cartItem","title","thumbnail","toFixed"],"mappings":"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","sourcesContent":["import React from 'react';\nimport CartCard from '../components/CartCard';\nimport Header from '../components/Header';\n\nclass Cart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cartItems: [],\n      purchaseTotalValue: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.insertItensInTheCart();\n  }\n\n  componentDidUpdate() {\n    this.updateLocStUserCart();\n  }\n\n  insertItensInTheCart = () => { // Função que capta os itens do carrinho salvos no local storage, sempre que a página Cart for montada.\n    const cartItems = JSON.parse(localStorage.getItem('userCart'));\n\n    if (Array.isArray(cartItems)) { // Caso a key \"userCart\", de local storage, NÃO seja um array vazio...\n      this.setState({ cartItems });\n    }\n  }\n\n  updateLocStUserCart = () => { // Função que atualiza a key \"userCart\", de local storage, sempre que algum estado da página Cart for atualizado [componentDidUpdate()].\n    const { cartItems } = this.state;\n    localStorage.setItem('userCart', JSON.stringify(cartItems));\n  }\n\n  deleteCartItem = ({ target }) => { // Função que deleta produtos do carrinho.\n    const { cartItems } = this.state;\n    const productIndex = cartItems.findIndex((product) => product.productId === target.id); // REF: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n    // OBS: Todos os botões de deletar, possuem Id igual à ID do produto. Isso possibilita o funcionamento do target acima.\n\n    this.setState({\n      cartItems: cartItems.filter((_product, index) => index !== productIndex), // Retorna todos os produtos contidos no estado 'cartItems', menos o produto excluído.\n    });\n\n    if(JSON.parse(localStorage.getItem('userCart')).length === 0) {\n      \n    }\n  }\n\n  purchaseTVIncrease = (price) => { // Função que AUMENTA o valor do estado purchaseTotalValue, sempre que um novo componente CartCard for montado (isso é, adicionado ao carrinho) e/ou quando o botão de '+' de um componente CartCard for pressionado. É passada ao componente CartCard, via props.\n    this.setState((prevState) => ({\n      purchaseTotalValue: prevState.purchaseTotalValue + price,\n    }));\n  }\n\n  purchaseTVDecrease = (price) => { // Função que REDUZ o valor do estado purchaseTotalValue, sempre que um novo componente CartCard for desmontado (isso é, retirado do carrinho) e/ou quando o botão de '-' de um componente CartCard for pressionado. É passada ao componente CartCard, via props.\n    this.setState((prevState) => ({\n      purchaseTotalValue: prevState.purchaseTotalValue - price,\n    }));\n  }\n\n  render() {\n    const { cartItems, purchaseTotalValue } = this.state;\n\n    return (\n      <div id=\"cartPage\">\n        <Header cartItems={cartItems}/>\n\n        <main id=\"cartProductsDisplay\">\n          {cartItems.length === 0\n            ? <h3 data-testid=\"shopping-cart-empty-message\">Seu carrinho está vazio</h3>\n            : cartItems.map((cartItem) => (\n              <div className=\"eachCartCardContainer\" key={ cartItem.title }>\n                <CartCard\n                  title={ cartItem.title }\n                  thumbnail={ cartItem.thumbnail }\n                  productPrice={ cartItem.price }\n                  productId={ cartItem.productId }\n                  deleteCartItem={ this.deleteCartItem }\n                  purchaseTVIncrease={ this.purchaseTVIncrease }\n                  purchaseTVDecrease={ this.purchaseTVDecrease }\n                />\n              </div>\n            ))}\n          <h3>{purchaseTotalValue.toFixed(2)}</h3>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Cart;\n"]},"metadata":{},"sourceType":"module"}