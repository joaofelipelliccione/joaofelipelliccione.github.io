{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/pages/Home.jsx\";\nimport React from 'react';\nimport { getProductsFromCategoryAndQuery } from '../services/api';\nimport Card from '../components/Card';\nimport Categories from '../components/Categories';\nimport Header from '../components/Header';\nimport '../styles/Home.css';\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n\n    this.settingLocalStorage = () => {\n      // Função que define o local storage do usuário, em seu primeiro acesso ao website. É chamada no Constructor(), logo, é como se estivesse sendo chamada no antigo componentWillMount().\n      const userCart = JSON.parse(localStorage.getItem(\"userCart\"));\n\n      if (userCart === null || userCart.length === 0) {\n        localStorage.setItem('userCart', JSON.stringify([]));\n        localStorage.setItem('totalItemsOnCart', JSON.stringify(0));\n        localStorage.setItem('purchaseTotalValue', JSON.stringify(0));\n      }\n    };\n\n    this.getLocStUserCart = () => {\n      // Função que capta os itens do carrinho salvos no local storage, sempre que a página Home for montada. Tal função evita que o carrinho do usuário seja restaurado sempre que ele vá para a página Cart ou para a ProductDetails.\n      const cartItemsFromLocSt = JSON.parse(localStorage.getItem('userCart'));\n\n      if (Array.isArray(cartItemsFromLocSt)) {\n        // Caso a key \"userCart\", de local storage, NÃO seja um array vazio...\n        this.setState({\n          cartItems: cartItemsFromLocSt\n        }); // ...o estado é definido.\n      }\n    };\n\n    this.handleClick = async () => {\n      // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada no termo pesquisado. Será chamada no onClick do botão de pesquisar.\n      this.setState({\n        loading: true\n      });\n      const {\n        categoryId,\n        userSearchedItem\n      } = this.state;\n      const response = await getProductsFromCategoryAndQuery(categoryId, userSearchedItem);\n      this.setState({\n        didSearch: true,\n        results: response.results,\n        loading: false\n      }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Salvando os resultados de pesquisa no estado \"results.\"\n    };\n\n    this.searchWithEnter = e => {\n      // Permite fazer uma busca pressionando a tecla Enter.\n      e.preventDefault();\n      this.handleClick();\n      console.log();\n    };\n\n    this.onInputChange = ({\n      target\n    }) => {\n      // Função que altera o estado 'userSearchedItem', no momento que o usuário realiza uma busca. Será chamada no onChange de #searchBar.\n      const {\n        name\n      } = target;\n      const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n      this.setState({\n        [name]: formElementValue\n      });\n    };\n\n    this.categoryChecked = async ({\n      target\n    }) => {\n      // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada na categoria clicada. Será chamada no onChange de cada radio, de cada categoria.\n      const {\n        userSearchedItem\n      } = this.state;\n      this.setState({\n        loading: true,\n        categoryId: target.id\n      });\n      const response = await getProductsFromCategoryAndQuery(target.id, userSearchedItem);\n      this.setState({\n        results: response.results,\n        didSearch: true,\n        loading: false\n      }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Salvando os resultados de pesquisa no estado \"results.\"\n    };\n\n    this.setLocStOnAddToCart = updatedCartItems => {\n      // Função que aloca, no local storage, importantes informações, sempre que um novo item for adicionado ao carrinho. É chamada dentro da addToCart() abaixo, após a atualização do estado cuja key é \"cartItems\".\n      // Atualização do carrinho, que passa a ter um novo item:\n      localStorage.setItem('userCart', JSON.stringify(updatedCartItems)); // Atualização da quantidade de itens no carrinho:\n\n      const quantitiesArray = updatedCartItems.map(microObj => microObj.quantity);\n      const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n      localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant)); // Atualização do atual valor total (R$) do carrinho:\n\n      const totalValuesArray = updatedCartItems.map(microObj => microObj.totalValue);\n      const totalValue = totalValuesArray.reduce((result, value) => result + value);\n      localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n    };\n\n    this.addToCart = ({\n      target\n    }) => {\n      // Função que permite a adição de um determinado produto ao carrinho de compras. Será passada para o componente Card, via props, e chamada no OnClick do botão \"Adicionar ao Carrinho\". || OBS: O Id do botão \"Adicionar ao Carrinho\", de cada Card, é igual ao índice do produto no array results.\n      const {\n        id\n      } = target;\n      const {\n        results,\n        cartItems\n      } = this.state;\n      const objProduct = {\n        productId: results[id].id,\n        title: results[id].title,\n        thumbnail: results[id].thumbnail,\n        price: results[id].price,\n        availableQuantity: results[id].available_quantity,\n        // Quantidade disponível daquele produto.\n        address: results[id].address,\n        quantity: 1,\n        // Quantidade adquirida pelo usuário\n        totalValue: results[id].price\n      };\n\n      if (!cartItems.some(item => item.title === objProduct.title)) {\n        // Condicional que evita a adição de 2 produtos iguais ao carrinho.\n        this.setState(prevState => ({\n          cartItems: [...prevState.cartItems, objProduct]\n        }), () => this.setLocStOnAddToCart(this.state.cartItems)); // Após atualização do estado de key igual à cartItems, atualiza-se o local storage.\n      }\n    };\n\n    this.cleanSearch = () => {\n      // Função que limpa a pesquisa realizada pelo usuário. Será chamada no onClick do botão de limpar (X).\n      this.setState({\n        userSearchedItem: '',\n        categoryId: '',\n        results: [],\n        didSearch: false\n      }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Limpando os resultados de pesquisa no estado \"results.\"\n    };\n\n    const searchResults = JSON.parse(localStorage.getItem(\"searchResults\"));\n    this.settingLocalStorage();\n\n    if (searchResults !== null) {\n      // Configurando o estado quando o usuário já realizou, anteriormente, buscas no website.\n      this.state = {\n        loading: false,\n        userSearchedItem: '',\n        categoryId: '',\n        results: searchResults,\n        didSearch: true,\n        cartItems: []\n      };\n    }\n\n    if (searchResults === null || searchResults.length === 0) {\n      // Configurando o estado quando o usuário acessa o website pela primeira vez.\n      this.state = {\n        loading: false,\n        userSearchedItem: '',\n        categoryId: '',\n        results: [],\n        didSearch: false,\n        cartItems: []\n      };\n    }\n  }\n\n  componentDidMount() {\n    this.getLocStUserCart();\n  }\n\n  render() {\n    const {\n      loading,\n      userSearchedItem,\n      results,\n      didSearch,\n      cartItems\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"homepage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      loading: loading,\n      cartItems: cartItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      id: \"homepageMain\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"searchContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"clearBtn\",\n      type: \"button\",\n      onClick: this.cleanSearch,\n      \"data-testid\": \"query-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"emoji-lupa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, \"Limpar\")), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"searchBar\",\n      \"data-testid\": \"query-input\",\n      name: \"userSearchedItem\",\n      value: userSearchedItem,\n      placeholder: \"Busque por um produto...\",\n      onChange: this.onInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"searchBtn\",\n      type: \"button\",\n      disabled: userSearchedItem === '',\n      onClick: this.handleClick,\n      onKeyPress: event => event.key === 'Enter' && this.searchWithEnter(event),\n      \"data-testid\": \"query-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"emoji-lupa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }\n    }, \"\\uD83D\\uDD0E\"))), /*#__PURE__*/React.createElement(\"section\", {\n      id: \"homepageCenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"aside\", {\n      id: \"categoriesContainer1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Categories, {\n      categoryChecked: this.categoryChecked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"productsDisplay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, !didSearch ? /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"home-initial-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 19\n      }\n    }, \"Busque um produto ou escolha uma categoria!\") : results.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cardContainer1\",\n      key: item.id,\n      \"data-testid\": \"product\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      productId: item.id,\n      title: item.title,\n      thumbnail: item.thumbnail,\n      price: item.price,\n      availableQuantity: item.available_quantity,\n      address: item.address,\n      productIndex: index,\n      addToCart: this.addToCart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    })))))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/pages/Home.jsx"],"names":["React","getProductsFromCategoryAndQuery","Card","Categories","Header","Home","Component","constructor","settingLocalStorage","userCart","JSON","parse","localStorage","getItem","length","setItem","stringify","getLocStUserCart","cartItemsFromLocSt","Array","isArray","setState","cartItems","handleClick","loading","categoryId","userSearchedItem","state","response","didSearch","results","searchWithEnter","e","preventDefault","console","log","onInputChange","target","name","formElementValue","type","checked","value","categoryChecked","id","setLocStOnAddToCart","updatedCartItems","quantitiesArray","map","microObj","quantity","totalQuant","reduce","result","totalValuesArray","totalValue","addToCart","objProduct","productId","title","thumbnail","price","availableQuantity","available_quantity","address","some","item","prevState","cleanSearch","searchResults","componentDidMount","render","event","key","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getProductsFromCategoryAndQuery } from '../services/api';\nimport Card from '../components/Card';\nimport Categories from '../components/Categories';\nimport Header from '../components/Header';\nimport '../styles/Home.css';\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    const searchResults = JSON.parse(localStorage.getItem(\"searchResults\"));\n    this.settingLocalStorage();\n\n    if (searchResults !== null) { // Configurando o estado quando o usuário já realizou, anteriormente, buscas no website.\n      this.state = {\n        loading: false,\n        userSearchedItem: '',\n        categoryId: '',\n        results: searchResults,\n        didSearch: true,\n        cartItems: [],\n      };\n    }\n\n    if (searchResults === null || searchResults.length === 0 ) { // Configurando o estado quando o usuário acessa o website pela primeira vez.\n      this.state = {\n        loading: false,\n        userSearchedItem: '',\n        categoryId: '',\n        results: [],\n        didSearch: false,\n        cartItems: [],\n      };\n    }\n  }\n\n  settingLocalStorage = () => { // Função que define o local storage do usuário, em seu primeiro acesso ao website. É chamada no Constructor(), logo, é como se estivesse sendo chamada no antigo componentWillMount().\n    const userCart = JSON.parse(localStorage.getItem(\"userCart\"));\n\n    if (userCart === null || userCart.length === 0) {\n      localStorage.setItem('userCart', JSON.stringify([]));\n      localStorage.setItem('totalItemsOnCart', JSON.stringify(0));\n      localStorage.setItem('purchaseTotalValue', JSON.stringify(0));\n    }\n  }\n\n  componentDidMount() {\n    this.getLocStUserCart();\n  }\n\n  getLocStUserCart = () => { // Função que capta os itens do carrinho salvos no local storage, sempre que a página Home for montada. Tal função evita que o carrinho do usuário seja restaurado sempre que ele vá para a página Cart ou para a ProductDetails.\n    const cartItemsFromLocSt = JSON.parse(localStorage.getItem('userCart'));\n\n    if (Array.isArray(cartItemsFromLocSt)) { // Caso a key \"userCart\", de local storage, NÃO seja um array vazio...\n      this.setState({ cartItems: cartItemsFromLocSt }); // ...o estado é definido.\n    }\n  }\n\n  handleClick = async () => { // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada no termo pesquisado. Será chamada no onClick do botão de pesquisar.\n    this.setState({ loading: true });\n    const { categoryId, userSearchedItem } = this.state;\n\n    const response = await getProductsFromCategoryAndQuery(categoryId, userSearchedItem);\n\n    this.setState({\n      didSearch: true,\n      results: response.results,\n      loading: false,\n    }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Salvando os resultados de pesquisa no estado \"results.\"\n  }\n\n  searchWithEnter = (e) => { // Permite fazer uma busca pressionando a tecla Enter.\n    e.preventDefault();\n    this.handleClick();\n    console.log()\n  }\n\n  onInputChange = ({ target }) => { // Função que altera o estado 'userSearchedItem', no momento que o usuário realiza uma busca. Será chamada no onChange de #searchBar.\n    const { name } = target;\n    const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({ [name]: formElementValue });\n  }\n\n  categoryChecked = async ({ target }) => { // Função que realiza a requisição para API getProductsFromCategoryAndQuery(), baseada na categoria clicada. Será chamada no onChange de cada radio, de cada categoria.\n    const { userSearchedItem } = this.state;\n    this.setState({ loading: true, categoryId: target.id });\n\n    const response = await getProductsFromCategoryAndQuery(target.id, userSearchedItem);\n    this.setState(\n      { results: response.results,\n        didSearch: true,\n        loading: false,\n      }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Salvando os resultados de pesquisa no estado \"results.\"\n  }\n\n  setLocStOnAddToCart = (updatedCartItems) => { // Função que aloca, no local storage, importantes informações, sempre que um novo item for adicionado ao carrinho. É chamada dentro da addToCart() abaixo, após a atualização do estado cuja key é \"cartItems\".\n\n    // Atualização do carrinho, que passa a ter um novo item:\n    localStorage.setItem('userCart', JSON.stringify(updatedCartItems));\n\n    // Atualização da quantidade de itens no carrinho:\n    const quantitiesArray = updatedCartItems.map((microObj) => microObj.quantity);\n    const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant));\n\n    // Atualização do atual valor total (R$) do carrinho:\n    const totalValuesArray = updatedCartItems.map((microObj) => microObj.totalValue);\n    const totalValue = totalValuesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n\n  }\n\n  addToCart = ({ target }) => { // Função que permite a adição de um determinado produto ao carrinho de compras. Será passada para o componente Card, via props, e chamada no OnClick do botão \"Adicionar ao Carrinho\". || OBS: O Id do botão \"Adicionar ao Carrinho\", de cada Card, é igual ao índice do produto no array results.\n    const { id } = target;\n    const { results, cartItems } = this.state;\n    const objProduct = {\n      productId: results[id].id,\n      title: results[id].title,\n      thumbnail: results[id].thumbnail,\n      price: results[id].price,\n      availableQuantity: results[id].available_quantity, // Quantidade disponível daquele produto.\n      address: results[id].address,\n      quantity: 1, // Quantidade adquirida pelo usuário\n      totalValue: results[id].price,\n    };\n\n    if (!cartItems.some((item) => item.title === objProduct.title)) { // Condicional que evita a adição de 2 produtos iguais ao carrinho.\n      this.setState((prevState) => ({\n        cartItems: [...prevState.cartItems, objProduct],\n      }), () => this.setLocStOnAddToCart(this.state.cartItems)); // Após atualização do estado de key igual à cartItems, atualiza-se o local storage.\n    }\n  }\n\n  cleanSearch = () => { // Função que limpa a pesquisa realizada pelo usuário. Será chamada no onClick do botão de limpar (X).\n    this.setState({\n      userSearchedItem: '',\n      categoryId: '',\n      results: [],\n      didSearch: false,\n    }, () => localStorage.setItem(\"searchResults\", JSON.stringify(this.state.results))); // Limpando os resultados de pesquisa no estado \"results.\"\n  }\n\n  render() {\n    const { loading, userSearchedItem, results, didSearch, cartItems } = this.state;\n\n    return (\n      <div id=\"homepage\">\n        <Header loading={ loading } cartItems={ cartItems } />\n\n        <section id=\"homepageMain\">\n          <div id=\"searchContainer\">\n            <button\n              id=\"clearBtn\"\n              type=\"button\"\n              onClick={ this.cleanSearch }\n              data-testid=\"query-button\"\n            >\n              <span role=\"img\" aria-label=\"emoji-lupa\">Limpar</span>\n            </button>\n            <label htmlFor=\"search\">\n              <input\n                id=\"searchBar\"\n                data-testid=\"query-input\"\n                name=\"userSearchedItem\"\n                value={ userSearchedItem }\n                placeholder=\"Busque por um produto...\"\n                onChange={ this.onInputChange }\n              />\n            </label>\n            <button\n              id=\"searchBtn\"\n              type=\"button\"\n              disabled={ (userSearchedItem === '') }\n              onClick={ this.handleClick }\n              onKeyPress={ (event) => event.key === 'Enter' && this.searchWithEnter(event) }\n              data-testid=\"query-button\"\n            >\n              <span role=\"img\" aria-label=\"emoji-lupa\">🔎</span>\n            </button>\n          </div>\n          <section id=\"homepageCenter\">\n            <aside id=\"categoriesContainer1\">\n              <Categories categoryChecked={ this.categoryChecked } />\n            </aside>\n            <div id=\"productsDisplay\">\n              { !didSearch\n                ? (\n                  <p data-testid=\"home-initial-message\">\n                    Busque um produto ou escolha uma categoria!\n                  </p>)\n                : results.map((item, index) => (\n                  <div className=\"cardContainer1\" key={ item.id } data-testid=\"product\">\n                    <Card\n                      productId={ item.id }\n                      title={ item.title }\n                      thumbnail={ item.thumbnail }\n                      price={ item.price }\n                      availableQuantity={ item.available_quantity }\n                      address={ item.address }\n                      productIndex={ index }\n                      addToCart={ this.addToCart }\n                    />\n                  </div>\n                ))}\n            </div>\n          </section>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}