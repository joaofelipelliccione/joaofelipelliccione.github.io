{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/components/Review.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Review.css';\n\nclass Review extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      // Função que evita que o forms seja POST, quando o usuário apertar o botão 'Avaliar'. É chamada dentro do onSubmit, do #reviewForm.\n      event.preventDefault();\n    };\n\n    this.handleChange = ({\n      target\n    }) => {\n      // Função que altera o estado 'name', 'comment' e/ou 'reviewStar' no momento que o usuário realiza alguma modificação. Será chamada nos onChanges de #reviewForm.\n      const {\n        name,\n        value\n      } = target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.sendReview = () => {\n      // Função que altera o estado cuja key é igual à 'reviews' e salva, no local storage, a avaliação do usuário.\n      const {\n        comment,\n        reviewStar,\n        name\n      } = this.state;\n      const {\n        productId\n      } = this.props;\n      const objComment = {\n        comment,\n        reviewStar,\n        name\n      };\n      this.setState(prevState => ({\n        reviews: [...prevState.reviews, objComment],\n        comment: '',\n        name: ''\n      }), () => localStorage.setItem(productId, JSON.stringify(this.state.reviews))); // Após a atualização do estado 'reviews', a avaliação do usuário é salva no local storage.\n    };\n\n    const {\n      productId: _productId\n    } = this.props;\n    const reviews = JSON.parse(localStorage.getItem(_productId));\n\n    if (reviews !== null) {\n      // Definição do estado caso o usuário já tenha realizado um review, para o respectivo produto, anteriormente.\n      this.state = {\n        name: '',\n        comment: '',\n        reviewStar: '',\n        reviews\n      };\n    }\n\n    if (reviews === null) {\n      // Definição do estado caso o usuário nunca tenha realizado um review para o respectivo produto, anteriormente.\n      this.state = {\n        name: '',\n        comment: '',\n        reviewStar: '',\n        reviews: []\n      };\n    }\n  }\n\n  render() {\n    const {\n      name,\n      comment,\n      reviews\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"reviewFormContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      id: \"reviewForm\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      id: \"\",\n      htmlFor: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"name\",\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Nome\",\n      value: name,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"reviewStarContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, \"1\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"1\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"1\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \"2\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"2\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"2\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \"3\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"3\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"3\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \"4\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"4\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"4\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, \"5\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"5\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"5\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"textarea\", {\n      \"data-testid\": \"product-detail-evaluation\",\n      rows: \"8\",\n      cols: \"40\",\n      placeholder: \"Mensagem (opcional)\",\n      onChange: this.handleChange,\n      name: \"comment\",\n      value: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.sendReview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, \"Avaliar\")), reviews.length > 0 && reviews.map(review => /*#__PURE__*/React.createElement(\"div\", {\n      key: review.comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, review.name), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, `Nota: ${review.reviewStar}`), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, review.comment))));\n  }\n\n}\n\nReview.propTypes = {\n  productId: PropTypes.string.isRequired\n};\nexport default Review;","map":{"version":3,"sources":["/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/components/Review.jsx"],"names":["React","PropTypes","Review","Component","constructor","props","handleSubmit","event","preventDefault","handleChange","target","name","value","setState","sendReview","comment","reviewStar","state","productId","objComment","prevState","reviews","localStorage","setItem","JSON","stringify","parse","getItem","render","length","map","review","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/Review.css';\n\nclass Review extends React.Component {\n  constructor(props) {\n    super(props);\n    const { productId } = this.props;\n    const reviews = JSON.parse(localStorage.getItem(productId));\n\n    if (reviews !== null) { // Definição do estado caso o usuário já tenha realizado um review, para o respectivo produto, anteriormente.\n      this.state = {\n        name: '',\n        comment: '',\n        reviewStar: '',\n        reviews,\n      };\n    }\n\n    if (reviews === null) { // Definição do estado caso o usuário nunca tenha realizado um review para o respectivo produto, anteriormente.\n      this.state = {\n        name: '',\n        comment: '',\n        reviewStar: '',\n        reviews: [],\n      };\n    }\n  }\n\n  handleSubmit = (event) => { // Função que evita que o forms seja POST, quando o usuário apertar o botão 'Avaliar'. É chamada dentro do onSubmit, do #reviewForm.\n    event.preventDefault();\n  }\n\n  handleChange = ({ target }) => { // Função que altera o estado 'name', 'comment' e/ou 'reviewStar' no momento que o usuário realiza alguma modificação. Será chamada nos onChanges de #reviewForm.\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  sendReview = () => { // Função que altera o estado cuja key é igual à 'reviews' e salva, no local storage, a avaliação do usuário.\n    const { comment, reviewStar, name } = this.state;\n    const { productId } = this.props;\n    const objComment = {\n      comment,\n      reviewStar,\n      name,\n    };\n\n    this.setState((prevState) => ({\n      reviews: [...prevState.reviews, objComment],\n      comment: '',\n      name: '',\n    }), () => localStorage.setItem(productId, JSON.stringify(this.state.reviews))); // Após a atualização do estado 'reviews', a avaliação do usuário é salva no local storage.\n  }\n\n  render() {\n    const { name, comment, reviews } = this.state;\n\n    return (\n      <div id=\"reviewFormContainer\">\n        <form id=\"reviewForm\" onSubmit={ this.handleSubmit }>\n          <label id=\"\"htmlFor=\"name\">\n            <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Nome\"\n              value={ name }\n              onChange={ this.handleChange }\n              required\n            />\n          </label>\n          <div id=\"reviewStarContainer\">\n            <label htmlFor=\"1\">\n              1\n              <input\n                id=\"1\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"1\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n            <label htmlFor=\"2\">\n              2\n              <input\n                id=\"2\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"2\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n            <label htmlFor=\"3\">\n              3\n              <input\n                id=\"3\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"3\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n            <label htmlFor=\"4\">\n              4\n              <input\n                id=\"4\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"4\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n            <label htmlFor=\"5\">\n              5\n              <input\n                id=\"5\"\n                type=\"radio\"\n                name=\"reviewStar\"\n                value=\"5\"\n                onClick={ this.handleChange }\n                required\n              />\n            </label>\n          </div>\n\n          <textarea\n            data-testid=\"product-detail-evaluation\"\n            rows=\"8\"\n            cols=\"40\"\n            placeholder=\"Mensagem (opcional)\"\n            onChange={ this.handleChange }\n            name=\"comment\"\n            value={ comment }\n          />\n          <br />\n\n          <button type=\"submit\" onClick={ this.sendReview }>Avaliar</button>\n        </form>\n        {reviews.length > 0\n        && reviews.map((review) => (\n          <div key={ review.comment }>\n            <h2>{ review.name }</h2>\n            <h3>{ `Nota: ${review.reviewStar}` }</h3>\n            <p>{ review.comment }</p>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nReview.propTypes = {\n  productId: PropTypes.string.isRequired,\n};\n\nexport default Review;\n"]},"metadata":{},"sourceType":"module"}