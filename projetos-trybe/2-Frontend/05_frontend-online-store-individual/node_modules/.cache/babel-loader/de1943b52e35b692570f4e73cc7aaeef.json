{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/components/Review.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Review extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setReview = () => {\n      const {\n        productId\n      } = this.props;\n      const reviews = JSON.parse(localStorage.getItem(productId));\n\n      if (Array.isArray(reviews)) {\n        this.setState({\n          reviews\n        });\n      }\n    };\n\n    this.handleSubmit = event => {\n      // Função que evita que o forms seja POST, quando o usuário apertar o botão 'Avaliar'. É chamada dentro do onSubmit, do #reviewForm.\n      event.preventDefault();\n    };\n\n    this.handleChange = ({\n      target\n    }) => {\n      // Função que altera o estado 'name', 'comment' e/ou 'reviewStar' no momento que o usuário realiza alguma modificação. Será chamada nos onChanges de #reviewForm.\n      const {\n        name,\n        value\n      } = target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.sendReview = () => {\n      // Função que altera o estado cuja key é igual à 'reviews' e salva, no local storage, a avaliação do usuário.\n      const {\n        comment,\n        reviewStar,\n        name\n      } = this.state;\n      const {\n        productId\n      } = this.props;\n      const objComment = {\n        comment,\n        reviewStar,\n        name\n      };\n      this.setState(prevState => ({\n        reviews: [...prevState.reviews, objComment],\n        comment: '',\n        name: ''\n      }), () => localStorage.setItem(productId, JSON.stringify(this.state.reviews)));\n    };\n\n    const {\n      productId: _productId\n    } = this.props;\n\n    const _reviews = JSON.parse(localStorage.getItem(_productId));\n\n    if (_reviews === null) {\n      this.state = {\n        name: '',\n        comment: '',\n        reviewStar: '',\n        reviews: []\n      };\n    }\n  }\n\n  componentDidMount() {\n    this.setReview();\n  }\n\n  render() {\n    const {\n      name,\n      comment,\n      reviews\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"reviewFormContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      id: \"reviewForm\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"name\",\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Nome\",\n      value: name,\n      onChange: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"1\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"1\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"1\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"2\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"2\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"2\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"3\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"3\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"3\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, \"4\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"4\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"4\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, \"5\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"5\",\n      type: \"radio\",\n      name: \"reviewStar\",\n      value: \"5\",\n      onClick: this.handleChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      \"data-testid\": \"product-detail-evaluation\",\n      rows: \"8\",\n      cols: \"40\",\n      placeholder: \"Mensagem (opcional)\",\n      onChange: this.handleChange,\n      name: \"comment\",\n      value: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.sendReview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, \"Avaliar\")), reviews.length > 0 && reviews.map(review => /*#__PURE__*/React.createElement(\"div\", {\n      key: review.comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, review.name), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, `Nota: ${review.reviewStar}`), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, review.comment))));\n  }\n\n}\n\nReview.propTypes = {\n  productId: PropTypes.string.isRequired\n};\nexport default Review;","map":{"version":3,"sources":["/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/components/Review.jsx"],"names":["React","PropTypes","Review","Component","constructor","props","setReview","productId","reviews","JSON","parse","localStorage","getItem","Array","isArray","setState","handleSubmit","event","preventDefault","handleChange","target","name","value","sendReview","comment","reviewStar","state","objComment","prevState","setItem","stringify","componentDidMount","render","length","map","review","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Review extends React.Component {\n  constructor(props) {\n    super(props);\n    const { productId } = this.props;\n    const reviews = JSON.parse(localStorage.getItem(productId));\n\n    if (reviews === null) {\n      this.state = {\n        name: '',\n        comment: '',\n        reviewStar: '',\n        reviews: [],\n      };\n    }\n\n    \n\n  }\n\n  componentDidMount() {\n    this.setReview();\n  }\n\n\n  setReview = () => {\n    const { productId } = this.props;\n    const reviews = JSON.parse(localStorage.getItem(productId));\n    if (Array.isArray(reviews)) {\n      this.setState({ reviews });\n    }\n  }\n\n  handleSubmit = (event) => { // Função que evita que o forms seja POST, quando o usuário apertar o botão 'Avaliar'. É chamada dentro do onSubmit, do #reviewForm.\n    event.preventDefault();\n  }\n\n  handleChange = ({ target }) => { // Função que altera o estado 'name', 'comment' e/ou 'reviewStar' no momento que o usuário realiza alguma modificação. Será chamada nos onChanges de #reviewForm.\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  sendReview = () => { // Função que altera o estado cuja key é igual à 'reviews' e salva, no local storage, a avaliação do usuário.\n    const { comment, reviewStar, name } = this.state;\n    const { productId } = this.props;\n    const objComment = {\n      comment,\n      reviewStar,\n      name,\n    };\n\n    this.setState((prevState) => ({\n      reviews: [...prevState.reviews, objComment],\n      comment: '',\n      name: '',\n    }), () => localStorage.setItem(productId, JSON.stringify(this.state.reviews)));\n  }\n\n  render() {\n    const { name, comment, reviews } = this.state;\n\n    return (\n      <div id=\"reviewFormContainer\">\n        <form id=\"reviewForm\" onSubmit={ this.handleSubmit }>\n          <label htmlFor=\"name\">\n            <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Nome\"\n              value={ name }\n              onChange={ this.handleChange }\n              required\n            />\n          </label>\n          <br />\n\n          <label htmlFor=\"1\">\n            1\n            <input\n              id=\"1\"\n              type=\"radio\"\n              name=\"reviewStar\"\n              value=\"1\"\n              onClick={ this.handleChange }\n              required\n            />\n          </label>\n          <label htmlFor=\"2\">\n            2\n            <input\n              id=\"2\"\n              type=\"radio\"\n              name=\"reviewStar\"\n              value=\"2\"\n              onClick={ this.handleChange }\n              required\n            />\n          </label>\n          <label htmlFor=\"3\">\n            3\n            <input\n              id=\"3\"\n              type=\"radio\"\n              name=\"reviewStar\"\n              value=\"3\"\n              onClick={ this.handleChange }\n              required\n            />\n          </label>\n          <label htmlFor=\"4\">\n            4\n            <input\n              id=\"4\"\n              type=\"radio\"\n              name=\"reviewStar\"\n              value=\"4\"\n              onClick={ this.handleChange }\n              required\n            />\n          </label>\n          <label htmlFor=\"5\">\n            5\n            <input\n              id=\"5\"\n              type=\"radio\"\n              name=\"reviewStar\"\n              value=\"5\"\n              onClick={ this.handleChange }\n              required\n            />\n          </label>\n          <br />\n\n          <textarea\n            data-testid=\"product-detail-evaluation\"\n            rows=\"8\"\n            cols=\"40\"\n            placeholder=\"Mensagem (opcional)\"\n            onChange={ this.handleChange }\n            name=\"comment\"\n            value={ comment }\n          />\n          <br />\n\n          <button type=\"submit\" onClick={ this.sendReview }>Avaliar</button>\n        </form>\n        {reviews.length > 0\n        && reviews.map((review) => (\n          <div key={ review.comment }>\n            <h2>{ review.name }</h2>\n            <h3>{ `Nota: ${review.reviewStar}` }</h3>\n            <p>{ review.comment }</p>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nReview.propTypes = {\n  productId: PropTypes.string.isRequired,\n};\n\nexport default Review;\n"]},"metadata":{},"sourceType":"module"}