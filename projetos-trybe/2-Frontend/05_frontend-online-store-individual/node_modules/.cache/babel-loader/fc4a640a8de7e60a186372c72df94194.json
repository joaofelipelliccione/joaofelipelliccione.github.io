{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/pages/ProductDetails.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Review from '../components/Review';\nimport Header from '../components/Header';\n\nclass ProductDetails extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setLocStOnAddToCart = updatedCartItems => {\n      // Função que aloca, no local storage, importantes informações, sempre que um novo item for adicionado ao carrinho. É chamada dentro da addToCart() abaixo, após a atualização do estado cuja key é \"cartItems\".\n      // Atualização do carrinho, que passa a ter um novo item:\n      localStorage.setItem('userCart', JSON.stringify(updatedCartItems)); // Atualização da quantidade de itens no carrinho:\n\n      const quantitiesArray = updatedCartItems.map(microObj => microObj.quantity);\n      const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n      localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant)); // Atualização do atual valor total (R$) do carrinho:\n\n      const totalValuesArray = updatedCartItems.map(microObj => microObj.totalValue);\n      const totalValue = totalValuesArray.reduce((result, value) => result + value);\n      localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n    };\n\n    this.addToCart = ({\n      target\n    }) => {\n      // Função que permite a adição de um determinado produto ao carrinho de compras. Será chamada no OnClick do botão \"Adicionar ao Carrinho\". || OBS: O Id do botão \"Adicionar ao Carrinho\" é igual ao índice do produto no array results.\n      const {\n        id\n      } = target;\n      const {\n        results,\n        cartItems\n      } = this.state;\n      const objProduct = {\n        productId: results[id].id,\n        title: results[id].title,\n        thumbnail: results[id].thumbnail,\n        price: results[id].price,\n        availableQuantity: results[id].available_quantity,\n        // Quantidade disponível daquele produto.\n        address: results[id].address,\n        quantity: 1,\n        // Quantidade adquirida pelo usuário\n        totalValue: results[id].price\n      };\n\n      if (!cartItems.some(item => item.title === objProduct.title)) {\n        // Condicional que evita a adição de 2 produtos iguais ao carrinho.\n        this.setState(prevState => ({\n          cartItems: [...prevState.cartItems, objProduct]\n        }), () => this.setLocStOnAddToCart(this.state.cartItems)); // Após atualização do estado de key igual à cartItems, atualiza-se o local storage.\n      }\n    };\n\n    const _cartItems = JSON.parse(localStorage.getItem('userCart'));\n\n    const searchResults = JSON.parse(localStorage.getItem(\"searchResults\"));\n    this.state = {\n      results: searchResults,\n      cartItems: _cartItems\n    };\n  }\n\n  render() {\n    const {\n      location: {\n        state: {\n          productId,\n          title,\n          thumbnail,\n          price,\n          address,\n          productIndex\n        }\n      }\n    } = this.props;\n    const {\n      cartItems\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"productDetailsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      cartItems: cartItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      \"data-testid\": \"product-detail-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, title), /*#__PURE__*/React.createElement(\"img\", {\n      src: thumbnail,\n      alt: title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, `R$ ${price.toFixed(2)}`), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, `${address.city_name}, ${address.state_name}`)), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"product-detail-add-to-cart\",\n      type: \"button\",\n      id: productIndex,\n      onClick: this.addToCart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, \"Adicionar ao Carrinho\"), /*#__PURE__*/React.createElement(Review, {\n      id: productId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nProductDetails.propTypes = {\n  location: PropTypes.shape({\n    state: PropTypes.shape({\n      productId: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      thumbnail: PropTypes.string.isRequired,\n      price: PropTypes.number.isRequired,\n      productIndex: PropTypes.number.isRequired,\n      address: PropTypes.shape({\n        city_id: PropTypes.string.isRequired,\n        city_name: PropTypes.string.isRequired,\n        state_id: PropTypes.string.isRequired,\n        state_name: PropTypes.string.isRequired\n      })\n    })\n  })\n};\nexport default ProductDetails;","map":{"version":3,"sources":["/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/05_frontend-online-store-individual/src/pages/ProductDetails.jsx"],"names":["React","PropTypes","Review","Header","ProductDetails","Component","constructor","props","setLocStOnAddToCart","updatedCartItems","localStorage","setItem","JSON","stringify","quantitiesArray","map","microObj","quantity","totalQuant","reduce","result","value","totalValuesArray","totalValue","addToCart","target","id","results","cartItems","state","objProduct","productId","title","thumbnail","price","availableQuantity","available_quantity","address","some","item","setState","prevState","parse","getItem","searchResults","render","location","productIndex","toFixed","city_name","state_name","propTypes","shape","string","isRequired","number","city_id","state_id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Review from '../components/Review';\nimport Header from '../components/Header';\n\nclass ProductDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    const cartItems = JSON.parse(localStorage.getItem('userCart'));\n    const searchResults = JSON.parse(localStorage.getItem(\"searchResults\"));\n\n    this.state = {\n      results: searchResults,\n      cartItems,\n    };\n  }\n\n  setLocStOnAddToCart = (updatedCartItems) => { // Função que aloca, no local storage, importantes informações, sempre que um novo item for adicionado ao carrinho. É chamada dentro da addToCart() abaixo, após a atualização do estado cuja key é \"cartItems\".\n\n    // Atualização do carrinho, que passa a ter um novo item:\n    localStorage.setItem('userCart', JSON.stringify(updatedCartItems));\n\n    // Atualização da quantidade de itens no carrinho:\n    const quantitiesArray = updatedCartItems.map((microObj) => microObj.quantity);\n    const totalQuant = quantitiesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"totalItemsOnCart\", JSON.stringify(totalQuant));\n\n    // Atualização do atual valor total (R$) do carrinho:\n    const totalValuesArray = updatedCartItems.map((microObj) => microObj.totalValue);\n    const totalValue = totalValuesArray.reduce((result, value) => result + value);\n    localStorage.setItem(\"purchaseTotalValue\", JSON.stringify(totalValue));\n\n  }\n\n  addToCart = ({ target }) => { // Função que permite a adição de um determinado produto ao carrinho de compras. Será chamada no OnClick do botão \"Adicionar ao Carrinho\". || OBS: O Id do botão \"Adicionar ao Carrinho\" é igual ao índice do produto no array results.\n    const { id } = target;\n    const { results, cartItems } = this.state;\n    const objProduct = {\n      productId: results[id].id,\n      title: results[id].title,\n      thumbnail: results[id].thumbnail,\n      price: results[id].price,\n      availableQuantity: results[id].available_quantity, // Quantidade disponível daquele produto.\n      address: results[id].address,\n      quantity: 1, // Quantidade adquirida pelo usuário\n      totalValue: results[id].price,\n    };\n\n    if (!cartItems.some((item) => item.title === objProduct.title)) { // Condicional que evita a adição de 2 produtos iguais ao carrinho.\n      this.setState((prevState) => ({\n        cartItems: [...prevState.cartItems, objProduct],\n      }), () => this.setLocStOnAddToCart(this.state.cartItems)); // Após atualização do estado de key igual à cartItems, atualiza-se o local storage.\n    }\n  }\n\n  render() {\n    const { location: { state: { productId, title, thumbnail, price, address, productIndex } } } = this.props;\n    const { cartItems } = this.state;\n\n    return (\n      <div id=\"productDetailsPage\">\n        <Header cartItems={ cartItems } />\n        <div>\n          <h3 data-testid=\"product-detail-name\">{title}</h3>\n          <img src={ thumbnail } alt={ title } />\n          <p>{ `R$ ${price.toFixed(2)}` }</p>\n          <p>{ `${address.city_name}, ${address.state_name}` }</p>\n        </div>\n        <button\n          data-testid=\"product-detail-add-to-cart\"\n          type=\"button\"\n          id={ productIndex }\n          onClick={ this.addToCart }\n        >\n          Adicionar ao Carrinho\n        </button>\n        <Review id={ productId } />\n      </div>\n\n    );\n  }\n}\n\nProductDetails.propTypes = {\n  location: PropTypes.shape({\n    state: PropTypes.shape({\n      productId: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      thumbnail: PropTypes.string.isRequired,\n      price: PropTypes.number.isRequired,\n      productIndex: PropTypes.number.isRequired,\n      address: PropTypes.shape({\n        city_id: PropTypes.string.isRequired,\n        city_name: PropTypes.string.isRequired,\n        state_id: PropTypes.string.isRequired,\n        state_name: PropTypes.string.isRequired,\n      }),\n    })\n  }),\n};\n\nexport default ProductDetails;\n"]},"metadata":{},"sourceType":"module"}